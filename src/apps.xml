<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd">
	
	<context:annotation-config/>
    
	<context:component-scan base-package="org.demo"/>
	
	<!-- 
	To enable @AspectJ support with XML based configuration use the aop:aspectj-autoproxy element
	-->
	<aop:aspectj-autoproxy/>

	<!--
	Only use the DriverManagerDataSource class should only be used for testing purposes since it does not provide pooling and will perform poorly when multiple requests for a connection are made.
	
	A DataSource is part of the JDBC specification and is a generalized connection facotory.
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username"  value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	 -->
	 
	<!--
	DBCP configuration:
	 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	    <property name="driverClassName" value="${jdbc.driverClassName}"/>
	    <property name="url" value="${jdbc.url}"/>
	    <property name="username" value="${jdbc.username}"/>
	    <property name="password" value="${jdbc.password}"/>
	</bean>
    
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>
    
  	<!-- a PlatformTransactionManager is still required 
  	
  	14.3.8 DataSourceTransactionManager
  	The DataSourceTransactionManager class is a PlatformTransactionManager implementation for single JDBC datasources. 
  	It binds a JDBC connection from the specified data source to the currently executing thread, potentially allowing for one thread connection per data source.
  	-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- the transactional advice (what 'happens'; see the <aop:advisor/> bean below) -->
  	<tx:advice id="txAdvice" transaction-manager="transactionManager">
  		
  		<!-- the transactional semantics... -->
  		<tx:attributes>
    	<!-- all methods starting with 'get' are read-only -->
    	<tx:method name="get*" read-only="true"/>
    	<!-- other methods use the default transaction settings (see below) -->
    	<tx:method name="*"/>
  		</tx:attributes>
  	</tx:advice>

  	<!-- ensure that the above transactional advice runs for any execution
    of an operation defined by the FooService interface -->
  	<aop:config>
  		<aop:pointcut id="serviceOperation" expression="execution(* org.demo.service.Simple*.*(..))"/>
  		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation"/>
  	</aop:config>

	<!-- enable the configuration of transactional behavior based on annotations -->
  	<tx:annotation-driven transaction-manager="transactionManager"/>
  	
</beans>